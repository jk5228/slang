# The Slang syntax specification.                           Jason Kim, 7/12/2016

# Production rules

: num str id .. ... : -> + - * / % ^ ! && || == <= >= < > break

%right ^
%left !
%left * / %
%left + -
%left &&
%left ||
%nonassoc == != <= >= < > .. ...
%right =

prog     : stm*
stmLst   : stm*
stm*     < EMPTY
         | stm
         | stm stm*
stm      < line ;
         | block
line     : exp
         | break
         | retStm
retStm   : return
         | return exp
block    : funBlk
         | ifBlk
         | whileBlk
         | forBlk
funBlk   : def id ( idLst ) { stmLst }
ifBlk    : if ( exp ) { stmLst } else { stmLst }
whileBlk : while ( exp ) { stmLst }
forBlk   : for ( id in exp ) { stmLst }
idLst    : id*
id*      < EMPTY
         | id
         | id , id*
exp      : ( exp )
         | prim
         | assign
         | arrAcc
         | funExp
         | arrExp
         | rngExp
         | arrComp
         | arithExp
         | logExp
prim     : num
         | str
         | id
assign   : id = exp
         | arrAcc = exp
arrExp   : { expLst }
rngExp   : exp .. exp
         | exp ... exp
arrComp  : { id in exp : exp }
         | { id in exp -> exp }
         | { id in exp : exp -> exp }
expLst   : exp*
exp*     < EMPTY
         | exp
         | exp , exp*
arrAcc   : id [ exp ]
funExp   : id ( expLst )
arithExp : exp + exp
         | exp - exp
         | exp * exp
         | exp / exp
         | exp % exp
         | exp ^ exp
logExp   : ! exp
         | exp && exp
         | exp || exp
         | exp == exp
         | exp <= exp
         | exp >= exp
         | exp > exp
         | exp < exp